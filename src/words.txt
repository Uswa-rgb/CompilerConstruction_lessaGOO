(FUNC, func)
(ID, String)
(PUNCT, :)
(ID, numPrint)
(BRKT, ()
(INT, Integer)
(PUNCT, :)
(ID, num)
(PUNCT, ,)
(INT, Integer)
(PUNCT, :)
(ID, length)
(BRKT, ))
(BRKT, {)
(INT, Integer)
(PUNCT, :)
(ID, i)
(PUNCT, ,)
(ID, j)
(PUNCT, ,)
(ID, first)
(PUNCT, ,)
(ID, temp)
(PUNCT, ;)
(CHAR, char)
(PUNCT, :)
(ID, a)
(PUNCT, ;)
(ID, a)
(PUNCT, :)
(PUNCT, :)
(LTC, 'x')
(PUNCT, ;)
(IOF, print)
(BRKT, ()
(STR, "enter number")
(BRKT, ))
(PUNCT, ;)
(IOF, In)
(IO, >>)
(ID, i)
(PUNCT, ;)
(IOF, println)
(BRKT, ()
(ID, i)
(BRKT, ))
(PUNCT, ;)
(ID, i)
(ASO, :=)
(ID, length)
(PUNCT, ;)
(WHILE, while)
(ID, i)
(RO, >)
(NUM, 0)
(PUNCT, :)
(BRKT, {)
(ID, first)
(ASO, :=)
(NUM, 0)
(PUNCT, ;)
(AO, /)
(ID, j)
(ASO, :=)
(NUM, 1)
(PUNCT, ;)
(WHILE, while)
(ID, j)
(RO, <)
(ID, i)
(PUNCT, :)
(BRKT, {)
(IOF, print)
(BRKT, ()
(ID, j)
(BRKT, ))
(PUNCT, ;)
(ID, j)
(ASO, :=)
(ID, j)
(AO, +)
(NUM, 1)
(PUNCT, ;)
(BRKT, })
(DS, if)
(ID, j)
(RO, =)
(RO, =)
(NUM, 1)
(PUNCT, :)
(BRKT, {)
(IOF, print)
(BRKT, ()
(STR, "one")
(BRKT, ))
(PUNCT, ;)
(BRKT, })
(DS, elif)
(ID, j)
(RO, =)
(RO, =)
(NUM, 2)
(PUNCT, :)
(BRKT, {)
(IOF, print)
(BRKT, ()
(STR, "two")
(BRKT, ))
(PUNCT, ;)
(BRKT, })
(DS, else)
(BRKT, {)
(IOF, print)
(BRKT, ()
(STR, "others")
(BRKT, ))
(PUNCT, ;)
(BRKT, })
(AO, /)
(ID, i)
(ASO, :=)
(ID, i)
(AO, -)
(NUM, 1)
(PUNCT, ;)
(AO, /)
(BRKT, })
(IOF, print)
(BRKT, ()
(STR, "temp is ")
(BRKT, ))
(PUNCT, ;)
(IOF, println)
(BRKT, ()
(ID, temp)
(BRKT, ))
(PUNCT, ;)
(RET, ret)
(ID, i)
(PUNCT, ;)
